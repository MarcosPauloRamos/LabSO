********** Código intermediário **********

1: (function, minloc, _, _)
2: (get_param, a, _, _)
3: (get_param, low, _, _)
4: (get_param, high, _, _)
5: (assign, k, low, _)
6: (vector_value, a, low, t2)
7: (assign, x, t2, _)
8: (addition, low, 1, t3)
9: (assign, i, t3, _)
10: (label, L1, _, _)
11: (less_than, i, high, t4)
12: (jump_if_false, t4, L3, _)
13: (vector_value, a, i, t5)
14: (less_than, t5, x, t6)
15: (jump_if_false, t6, L2, _)
16: (vector_value, a, i, t7)
17: (assign, x, t7, _)
18: (assign, k, i, _)
19: (label, L2, _, _)
20: (addition, i, 1, t8)
21: (assign, i, t8, _)
22: (goto, L1, _, _)
23: (label, L3, _, _)
24: (return, k, _, _)
25: (function, sort, _, _)
26: (get_param, a, _, _)
27: (get_param, low, _, _)
28: (get_param, high, _, _)
29: (assign, i, low, _)
30: (label, L4, _, _)
31: (subtraction, high, 1, t9)
32: (less_than, i, t9, t10)
33: (jump_if_false, t10, L5, _)
34: (param_list, 3, _, _)
35: (set_param, a, _, _)
36: (set_param, i, _, _)
37: (set_param, high, _, _)
38: (call, minloc, 3, t11)
39: (assign, k, t11, _)
40: (vector_value, a, k, t12)
41: (assign, t, t12, _)
42: (vector_value, a, i, t13)
43: (vector_address, a, k, t14)
44: (assign, t14, t13, _)
45: (vector_address, a, i, t15)
46: (assign, t15, t, _)
47: (addition, i, 1, t16)
48: (assign, i, t16, _)
49: (goto, L4, _, _)
50: (label, L5, _, _)
51: (return, _, _, _)
52: (function, main, _, _)
53: (assign, i, 0, _)
54: (label, L6, _, _)
55: (less_than, i, 10, t17)
56: (jump_if_false, t17, L7, _)
57: (subtraction, 25, i, t18)
58: (vector_address, vet, i, t19)
59: (assign, t19, t18, _)
60: (addition, i, 1, t20)
61: (assign, i, t20, _)
62: (goto, L6, _, _)
63: (label, L7, _, _)
64: (param_list, 3, _, _)
65: (set_param, vet, _, _)
66: (set_param, 0, _, _)
67: (set_param, 10, _, _)
68: (call, sort, 3, t21)
69: (assign, i, 0, _)
70: (label, L8, _, _)
71: (less_than, i, 10, t22)
72: (jump_if_false, t22, L9, _)
73: (param_list, 1, _, _)
74: (vector_value, vet, i, t23)
75: (set_param, t23, _, _)
76: (call, output, 1, t24)
77: (addition, i, 1, t25)
78: (assign, i, t25, _)
79: (goto, L8, _, _)
80: (label, L9, _, _)
81: (syscall, _, _, _)

********** Código objeto **********

minloc:
    0:	addi	$sp, $sp, 8
    1:	sw	$a0, -5($sp)
    2:	sw	$a1, -4($sp)
    3:	sw	$a2, -3($sp)
    4:	lw	$s0, -4($sp)
    5:	sw	$s0, 0($sp)
    6:	lw	$s1, -5($sp)
    7:	add	$t0, $s1, $s0
    8:	lw	$t0, 0($t0)
    9:	sw	$t0, -1($sp)
    10:	addi	$t1, $s0, 1
    11:	sw	$t1, -2($sp)
.L1	
    12:	lw	$s0, -2($sp)
    13:	lw	$s1, -3($sp)
    14:	lt	$t2, $s0, $s1
    15:	jf	$t2, L3
    16:	lw	$s2, -5($sp)
    17:	add	$t3, $s2, $s0
    18:	lw	$t3, 0($t3)
    19:	lw	$s3, -1($sp)
    20:	lt	$t4, $t3, $s3
    21:	jf	$t4, L2
    22:	add	$t5, $s2, $s0
    23:	lw	$t5, 0($t5)
    24:	sw	$t5, -1($sp)
    25:	lw	$s3, -1($sp)
    26:	sw	$s0, 0($sp)
.L2	
    27:	lw	$s0, -2($sp)
    28:	addi	$t6, $s0, 1
    29:	sw	$t6, -2($sp)
    30:	lw	$s0, -2($sp)
    31:	j	L1
.L3	
    32:	lw	$s0, 0($sp)
    33:	mov	$v0, $s0
    34:	jr	$ra

sort:
    35:	addi	$sp, $sp, 8
    36:	sw	$a0, -5($sp)
    37:	sw	$a1, -4($sp)
    38:	sw	$a2, -3($sp)
    39:	lw	$s0, -4($sp)
    40:	sw	$s0, -2($sp)
.L4	
    41:	lw	$s0, -3($sp)
    42:	subi	$t0, $s0, 1
    43:	lw	$s1, -2($sp)
    44:	lt	$t1, $s1, $t0
    45:	jf	$t1, L5
    46:	la	$a0, -5($sp)
    47:	mov	$a1, $s1
    48:	mov	$a2, $s0
    49:	sw	$ra, -6($sp)
    50:	jal	minloc
    51:	subi	$sp, $sp, 8
    52:	lw	$ra, -6($sp)
    53:	mov	$s0, $v0
    54:	sw	$s0, -1($sp)
    55:	lw	$s1, -5($sp)
    56:	lw	$s2, -1($sp)
    57:	add	$t2, $s1, $s2
    58:	lw	$t2, 0($t2)
    59:	sw	$t2, 0($sp)
    60:	lw	$s3, -2($sp)
    61:	add	$t3, $s1, $s3
    62:	lw	$t3, 0($t3)
    63:	add	$t4, $s1, $s2
    64:	sw	$t3, 0($t4)
    65:	add	$t5, $s1, $s3
    66:	lw	$s4, 0($sp)
    67:	sw	$s4, 0($t5)
    68:	addi	$t6, $s3, 1
    69:	sw	$t6, -2($sp)
    70:	lw	$s3, -2($sp)
    71:	j	L4
.L5	
    72:	jr	$ra

main:
    73:	addi	$sp, $gp, 1
    74:	addi	$sp, $sp, 12
    75:	li	$t0, 0
    76:	sw	$t0, 0($sp)
.L6	
    77:	lw	$s0, 0($sp)
    78:	li	$t2, 10
    79:	lt	$t1, $s0, $t2
    80:	jf	$t1, L7
    81:	li	$t3, 25
    82:	sub	$t4, $t3, $s0
    83:	la	$s1, 0($gp)
    84:	add	$t5, $s1, $s0
    85:	sw	$t4, 0($t5)
    86:	addi	$t6, $s0, 1
    87:	sw	$t6, 0($sp)
    88:	lw	$s0, 0($sp)
    89:	j	L6
.L7	
    90:	la	$a0, 0($sp)
    91:	li	$a1, 0
    92:	li	$a2, 10
    93:	sw	$ra, -1($sp)
    94:	jal	sort
    95:	subi	$sp, $sp, 8
    96:	lw	$ra, -1($sp)
    97:	mov	$s0, $v0
    98:	li	$t7, 0
    99:	sw	$t7, 0($sp)
.L8	
    100:	lw	$s0, 0($sp)
    101:	li	$t0, 10
    102:	lt	$t8, $s0, $t0
    103:	jf	$t8, L9
    104:	la	$s1, 0($gp)
    105:	add	$t1, $s1, $s0
    106:	lw	$t1, 0($t1)
    107:	mov	$a0, $t1
    108:	out	$a0, 15737360
    109:	addi	$t2, $s0, 1
    110:	sw	$t2, 0($sp)
    111:	lw	$s0, 0($sp)
    112:	j	L8
.L9	
    113:	subi	$sp, $sp, 12
    114:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000001001010;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000001000; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111011; 	// sw
disk[3] <= 32'b010010_11110_00010_1111111111111100; 	// sw
disk[4] <= 32'b010010_11110_00011_1111111111111101; 	// sw
disk[5] <= 32'b001111_11110_00101_1111111111111100; 	// lw
disk[6] <= 32'b010010_11110_00101_0000000000000000; 	// sw
disk[7] <= 32'b001111_11110_00110_1111111111111011; 	// lw
disk[8] <= 32'b000000_00110_00101_01111_00000_000000; 	// add
disk[9] <= 32'b001111_01111_01111_0000000000000000; 	// lw
disk[10] <= 32'b010010_11110_01111_1111111111111111; 	// sw
disk[11] <= 32'b000001_00101_10000_0000000000000001; 	// addi
disk[12] <= 32'b010010_11110_10000_1111111111111110; 	// sw
disk[13] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[14] <= 32'b001111_11110_00110_1111111111111101; 	// lw
disk[15] <= 32'b000000_00101_00110_10001_00000_001110; 	// lt
disk[16] <= 32'b010101_10001_00000_0000000000100001; 	// jf
disk[17] <= 32'b001111_11110_00111_1111111111111011; 	// lw
disk[18] <= 32'b000000_00111_00101_10010_00000_000000; 	// add
disk[19] <= 32'b001111_10010_10010_0000000000000000; 	// lw
disk[20] <= 32'b001111_11110_01000_1111111111111111; 	// lw
disk[21] <= 32'b000000_10010_01000_10011_00000_001110; 	// lt
disk[22] <= 32'b010101_10011_00000_0000000000011100; 	// jf
disk[23] <= 32'b000000_00111_00101_10100_00000_000000; 	// add
disk[24] <= 32'b001111_10100_10100_0000000000000000; 	// lw
disk[25] <= 32'b010010_11110_10100_1111111111111111; 	// sw
disk[26] <= 32'b001111_11110_01000_1111111111111111; 	// lw
disk[27] <= 32'b010010_11110_00101_0000000000000000; 	// sw
disk[28] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[29] <= 32'b000001_00101_10101_0000000000000001; 	// addi
disk[30] <= 32'b010010_11110_10101_1111111111111110; 	// sw
disk[31] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[32] <= 32'b111100_00000000000000000000001101; 	// j
disk[33] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[34] <= 32'b001110_00101_11000_0000000000000000; 	// mov
disk[35] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[36] <= 32'b000001_11110_11110_0000000000001000; 	// addi
disk[37] <= 32'b010010_11110_00001_1111111111111011; 	// sw
disk[38] <= 32'b010010_11110_00010_1111111111111100; 	// sw
disk[39] <= 32'b010010_11110_00011_1111111111111101; 	// sw
disk[40] <= 32'b001111_11110_00101_1111111111111100; 	// lw
disk[41] <= 32'b010010_11110_00101_1111111111111110; 	// sw
disk[42] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[43] <= 32'b000010_00101_01111_0000000000000001; 	// subi
disk[44] <= 32'b001111_11110_00110_1111111111111110; 	// lw
disk[45] <= 32'b000000_00110_01111_10000_00000_001110; 	// lt
disk[46] <= 32'b010101_10000_00000_0000000001001001; 	// jf
disk[47] <= 32'b010001_11110_00001_1111111111111011; 	// la
disk[48] <= 32'b001110_00110_00010_0000000000000000; 	// mov
disk[49] <= 32'b001110_00101_00011_0000000000000000; 	// mov
disk[50] <= 32'b010010_11110_11111_1111111111111010; 	// sw
disk[51] <= 32'b111110_00000000000000000000000001; 	// jal
disk[52] <= 32'b000010_11110_11110_0000000000001000; 	// subi
disk[53] <= 32'b001111_11110_11111_1111111111111010; 	// lw
disk[54] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[55] <= 32'b010010_11110_00101_1111111111111111; 	// sw
disk[56] <= 32'b001111_11110_00110_1111111111111011; 	// lw
disk[57] <= 32'b001111_11110_00111_1111111111111111; 	// lw
disk[58] <= 32'b000000_00110_00111_10001_00000_000000; 	// add
disk[59] <= 32'b001111_10001_10001_0000000000000000; 	// lw
disk[60] <= 32'b010010_11110_10001_0000000000000000; 	// sw
disk[61] <= 32'b001111_11110_01000_1111111111111110; 	// lw
disk[62] <= 32'b000000_00110_01000_10010_00000_000000; 	// add
disk[63] <= 32'b001111_10010_10010_0000000000000000; 	// lw
disk[64] <= 32'b000000_00110_00111_10011_00000_000000; 	// add
disk[65] <= 32'b010010_10011_10010_0000000000000000; 	// sw
disk[66] <= 32'b000000_00110_01000_10100_00000_000000; 	// add
disk[67] <= 32'b001111_11110_01001_0000000000000000; 	// lw
disk[68] <= 32'b010010_10100_01001_0000000000000000; 	// sw
disk[69] <= 32'b000001_01000_10101_0000000000000001; 	// addi
disk[70] <= 32'b010010_11110_10101_1111111111111110; 	// sw
disk[71] <= 32'b001111_11110_01000_1111111111111110; 	// lw
disk[72] <= 32'b111100_00000000000000000000101010; 	// j
disk[73] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[74] <= 32'b000001_11101_11110_0000000000000001; 	// addi
disk[75] <= 32'b000001_11110_11110_0000000000001100; 	// addi
disk[76] <= 32'b010000_00000_01111_0000000000000000; 	// li
disk[77] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[78] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[79] <= 32'b010000_00000_10001_0000000000001010; 	// li
disk[80] <= 32'b000000_00101_10001_10000_00000_001110; 	// lt
disk[81] <= 32'b010101_10000_00000_0000000001011011; 	// jf
disk[82] <= 32'b010000_00000_10010_0000000000011001; 	// li
disk[83] <= 32'b000000_10010_00101_10011_00000_000001; 	// sub
disk[84] <= 32'b010001_11101_00110_0000000000000000; 	// la
disk[85] <= 32'b000000_00110_00101_10100_00000_000000; 	// add
disk[86] <= 32'b010010_10100_10011_0000000000000000; 	// sw
disk[87] <= 32'b000001_00101_10101_0000000000000001; 	// addi
disk[88] <= 32'b010010_11110_10101_0000000000000000; 	// sw
disk[89] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[90] <= 32'b111100_00000000000000000001001110; 	// j
disk[91] <= 32'b010001_11110_00001_0000000000000000; 	// la
disk[92] <= 32'b010000_00000_00010_0000000000000000; 	// li
disk[93] <= 32'b010000_00000_00011_0000000000001010; 	// li
disk[94] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[95] <= 32'b111110_00000000000000000000100100; 	// jal
disk[96] <= 32'b000010_11110_11110_0000000000001000; 	// subi
disk[97] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[98] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[99] <= 32'b010000_00000_10110_0000000000000000; 	// li
disk[100] <= 32'b010010_11110_10110_0000000000000000; 	// sw
disk[101] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[102] <= 32'b010000_00000_01111_0000000000001010; 	// li
disk[103] <= 32'b000000_00101_01111_10111_00000_001110; 	// lt
disk[104] <= 32'b010101_10111_00000_0000000001110010; 	// jf
disk[105] <= 32'b010001_11101_00110_0000000000000000; 	// la
disk[106] <= 32'b000000_00110_00101_10000_00000_000000; 	// add
disk[107] <= 32'b001111_10000_10000_0000000000000000; 	// lw
disk[108] <= 32'b001110_10000_00001_0000000000000000; 	// mov
disk[109] <= 32'b010100_00000_00001_0010001000010000; 	// out
disk[110] <= 32'b000001_00101_10001_0000000000000001; 	// addi
disk[111] <= 32'b010010_11110_10001_0000000000000000; 	// sw
disk[112] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[113] <= 32'b111100_00000000000000000001100101; 	// j
disk[114] <= 32'b000010_11110_11110_0000000000001100; 	// subi
disk[115] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

