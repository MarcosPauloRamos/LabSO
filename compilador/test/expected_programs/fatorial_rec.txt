********** Código intermediário **********

1: (function, fatorial, _, _)
2: (get_param, n, _, _)
3: (less_than, n, 2, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 1, _, _)
6: (goto, L2, _, _)
7: (label, L1, _, _)
8: (param_list, 1, _, _)
9: (subtraction, n, 1, t2)
10: (set_param, t2, _, _)
11: (call, fatorial, 1, t3)
12: (multiplication, t3, n, t4)
13: (return, t4, _, _)
14: (label, L2, _, _)
15: (return, _, _, _)
16: (function, main, _, _)
17: (param_list, 1, _, _)
18: (param_list, 1, _, _)
19: (set_param, 5, _, _)
20: (call, fatorial, 1, t5)
21: (set_param, t5, _, _)
22: (call, output, 1, t6)
23: (syscall, _, _, _)

********** Código objeto **********

fatorial:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t1, 2
    4:	lt	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 1
    7:	mov	$v0, $t2
    8:	jr	$ra
    9:	j	L2
.L1	
    10:	lw	$s0, 0($sp)
    11:	subi	$t3, $s0, 1
    12:	mov	$a0, $t3
    13:	sw	$ra, -1($sp)
    14:	jal	fatorial
    15:	subi	$sp, $sp, 3
    16:	lw	$ra, -1($sp)
    17:	mov	$s0, $v0
    18:	lw	$s1, 0($sp)
    19:	mul	$t4, $s0, $s1
    20:	mov	$v0, $t4
    21:	jr	$ra
.L2	
    22:	jr	$ra

main:
    23:	addi	$sp, $sp, 1
    24:	li	$a0, 5
    25:	sw	$ra, 0($sp)
    26:	jal	fatorial
    27:	subi	$sp, $sp, 3
    28:	lw	$ra, 0($sp)
    29:	mov	$s0, $v0
    30:	mov	$a0, $s0
    31:	out	$a0, 37269296
    32:	subi	$sp, $sp, 1
    33:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000011000;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[2] <= 32'b010010_11110_00001_0000000000000000; 	// sw
disk[3] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[4] <= 32'b010000_00000_10000_0000000000000010; 	// li
disk[5] <= 32'b000000_00101_10000_01111_00000_001110; 	// lt
disk[6] <= 32'b010101_01111_00000_0000000000001011; 	// jf
disk[7] <= 32'b010000_00000_10001_0000000000000001; 	// li
disk[8] <= 32'b001110_10001_11000_0000000000000000; 	// mov
disk[9] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[10] <= 32'b111100_00000000000000000000010111; 	// j
disk[11] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[12] <= 32'b000010_00101_10010_0000000000000001; 	// subi
disk[13] <= 32'b001110_10010_00001_0000000000000000; 	// mov
disk[14] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[15] <= 32'b111110_00000000000000000000000001; 	// jal
disk[16] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[17] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[18] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[19] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[20] <= 32'b000000_00101_00110_10011_00000_000010; 	// mul
disk[21] <= 32'b001110_10011_11000_0000000000000000; 	// mov
disk[22] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[23] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[24] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[25] <= 32'b010000_00000_00001_0000000000000101; 	// li
disk[26] <= 32'b010010_11110_11111_0000000000000000; 	// sw
disk[27] <= 32'b111110_00000000000000000000000001; 	// jal
disk[28] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[29] <= 32'b001111_11110_11111_0000000000000000; 	// lw
disk[30] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[31] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[32] <= 32'b010100_00000_00001_1010111100110000; 	// out
disk[33] <= 32'b000010_11110_11110_0000000000000001; 	// subi
disk[34] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

