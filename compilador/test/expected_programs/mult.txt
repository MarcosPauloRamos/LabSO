********** Código intermediário **********

1: (function, mult, _, _)
2: (get_param, n, _, _)
3: (get_param, m, _, _)
4: (assign, c, 1, _)
5: (assign, fn, 0, _)
6: (label, L1, _, _)
7: (less_than, c, m, t1)
8: (jump_if_false, t1, L2, _)
9: (addition, fn, n, t2)
10: (assign, fn, t2, _)
11: (addition, c, 1, t3)
12: (assign, c, t3, _)
13: (goto, L1, _, _)
14: (label, L2, _, _)
15: (return, fn, _, _)
16: (function, main, _, _)
17: (param_list, 1, _, _)
18: (param_list, 2, _, _)
19: (set_param, 5, _, _)
20: (set_param, 6, _, _)
21: (call, mult, 2, t4)
22: (set_param, t4, _, _)
23: (call, output, 1, t5)
24: (syscall, _, _, _)

********** Código objeto **********

mult:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	sw	$a1, -3($sp)
    3:	li	$t0, 1
    4:	sw	$t0, -2($sp)
    5:	li	$t1, 0
    6:	sw	$t1, -1($sp)
.L1	
    7:	lw	$s0, -2($sp)
    8:	lw	$s1, -3($sp)
    9:	lt	$t2, $s0, $s1
    10:	jf	$t2, L2
    11:	lw	$s2, -1($sp)
    12:	lw	$s3, -4($sp)
    13:	add	$t3, $s2, $s3
    14:	sw	$t3, -1($sp)
    15:	lw	$s2, -1($sp)
    16:	addi	$t4, $s0, 1
    17:	sw	$t4, -2($sp)
    18:	lw	$s0, -2($sp)
    19:	j	L1
.L2	
    20:	lw	$s0, -1($sp)
    21:	mov	$v0, $s0
    22:	jr	$ra

main:
    23:	addi	$sp, $sp, 1
    24:	li	$a0, 5
    25:	li	$a1, 6
    26:	sw	$ra, 0($sp)
    27:	jal	mult
    28:	subi	$sp, $sp, 7
    29:	lw	$ra, 0($sp)
    30:	mov	$s0, $v0
    31:	mov	$a0, $s0
    32:	out	$a0, 10155632
    33:	subi	$sp, $sp, 1
    34:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000011000;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111100; 	// sw
disk[3] <= 32'b010010_11110_00010_1111111111111101; 	// sw
disk[4] <= 32'b010000_00000_01111_0000000000000001; 	// li
disk[5] <= 32'b010010_11110_01111_1111111111111110; 	// sw
disk[6] <= 32'b010000_00000_10000_0000000000000000; 	// li
disk[7] <= 32'b010010_11110_10000_1111111111111111; 	// sw
disk[8] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[9] <= 32'b001111_11110_00110_1111111111111101; 	// lw
disk[10] <= 32'b000000_00101_00110_10001_00000_001110; 	// lt
disk[11] <= 32'b010101_10001_00000_0000000000010101; 	// jf
disk[12] <= 32'b001111_11110_00111_1111111111111111; 	// lw
disk[13] <= 32'b001111_11110_01000_1111111111111100; 	// lw
disk[14] <= 32'b000000_00111_01000_10010_00000_000000; 	// add
disk[15] <= 32'b010010_11110_10010_1111111111111111; 	// sw
disk[16] <= 32'b001111_11110_00111_1111111111111111; 	// lw
disk[17] <= 32'b000001_00101_10011_0000000000000001; 	// addi
disk[18] <= 32'b010010_11110_10011_1111111111111110; 	// sw
disk[19] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[20] <= 32'b111100_00000000000000000000001000; 	// j
disk[21] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[22] <= 32'b001110_00101_11000_0000000000000000; 	// mov
disk[23] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[24] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[25] <= 32'b010000_00000_00001_0000000000000101; 	// li
disk[26] <= 32'b010000_00000_00010_0000000000000110; 	// li
disk[27] <= 32'b010010_11110_11111_0000000000000000; 	// sw
disk[28] <= 32'b111110_00000000000000000000000001; 	// jal
disk[29] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[30] <= 32'b001111_11110_11111_0000000000000000; 	// lw
disk[31] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[32] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[33] <= 32'b010100_00000_00001_1111011001110000; 	// out
disk[34] <= 32'b000010_11110_11110_0000000000000001; 	// subi
disk[35] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

