********** Código intermediário **********

1: (function, gcd, _, _)
2: (get_param, u, _, _)
3: (get_param, v, _, _)
4: (equal, v, 0, t1)
5: (jump_if_false, t1, L1, _)
6: (return, u, _, _)
7: (goto, L2, _, _)
8: (label, L1, _, _)
9: (param_list, 2, _, _)
10: (set_param, v, _, _)
11: (division, u, v, t2)
12: (multiplication, t2, v, t3)
13: (subtraction, u, t3, t4)
14: (set_param, t4, _, _)
15: (call, gcd, 2, t5)
16: (return, t5, _, _)
17: (label, L2, _, _)
18: (return, _, _, _)
19: (function, main, _, _)
20: (assign, x, 30, _)
21: (assign, y, 24, _)
22: (param_list, 1, _, _)
23: (param_list, 2, _, _)
24: (set_param, x, _, _)
25: (set_param, y, _, _)
26: (call, gcd, 2, t6)
27: (set_param, t6, _, _)
28: (call, output, 1, t7)
29: (syscall, _, _, _)

********** Código objeto **********

gcd:
    0:	addi	$sp, $sp, 4
    1:	sw	$a0, -1($sp)
    2:	sw	$a1, 0($sp)
    3:	lw	$s0, 0($sp)
    4:	li	$t1, 0
    5:	eq	$t0, $s0, $t1
    6:	jf	$t0, L1
    7:	lw	$s1, -1($sp)
    8:	mov	$v0, $s1
    9:	jr	$ra
    10:	j	L2
.L1	
    11:	lw	$s0, 0($sp)
    12:	mov	$a0, $s0
    13:	lw	$s1, -1($sp)
    14:	div	$t2, $s1, $s0
    15:	mul	$t3, $t2, $s0
    16:	sub	$t4, $s1, $t3
    17:	mov	$a1, $t4
    18:	sw	$ra, -2($sp)
    19:	jal	gcd
    20:	subi	$sp, $sp, 4
    21:	lw	$ra, -2($sp)
    22:	mov	$s0, $v0
    23:	mov	$v0, $s0
    24:	jr	$ra
.L2	
    25:	jr	$ra

main:
    26:	addi	$sp, $sp, 3
    27:	li	$t0, 30
    28:	sw	$t0, -1($sp)
    29:	li	$t1, 24
    30:	sw	$t1, 0($sp)
    31:	lw	$s0, -1($sp)
    32:	mov	$a0, $s0
    33:	lw	$s1, 0($sp)
    34:	mov	$a1, $s1
    35:	sw	$ra, -2($sp)
    36:	jal	gcd
    37:	subi	$sp, $sp, 4
    38:	lw	$ra, -2($sp)
    39:	mov	$s0, $v0
    40:	mov	$a0, $s0
    41:	out	$a0, 11245040
    42:	subi	$sp, $sp, 3
    43:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000011011;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000100; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111111; 	// sw
disk[3] <= 32'b010010_11110_00010_0000000000000000; 	// sw
disk[4] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[5] <= 32'b010000_00000_10000_0000000000000000; 	// li
disk[6] <= 32'b000000_00101_10000_01111_00000_001100; 	// eq
disk[7] <= 32'b010101_01111_00000_0000000000001100; 	// jf
disk[8] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[9] <= 32'b001110_00110_11000_0000000000000000; 	// mov
disk[10] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[11] <= 32'b111100_00000000000000000000011010; 	// j
disk[12] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[13] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[14] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[15] <= 32'b000000_00110_00101_10001_00000_000011; 	// div
disk[16] <= 32'b000000_10001_00101_10010_00000_000010; 	// mul
disk[17] <= 32'b000000_00110_10010_10011_00000_000001; 	// sub
disk[18] <= 32'b001110_10011_00010_0000000000000000; 	// mov
disk[19] <= 32'b010010_11110_11111_1111111111111110; 	// sw
disk[20] <= 32'b111110_00000000000000000000000001; 	// jal
disk[21] <= 32'b000010_11110_11110_0000000000000100; 	// subi
disk[22] <= 32'b001111_11110_11111_1111111111111110; 	// lw
disk[23] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[24] <= 32'b001110_00101_11000_0000000000000000; 	// mov
disk[25] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[26] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[27] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[28] <= 32'b010000_00000_01111_0000000000011110; 	// li
disk[29] <= 32'b010010_11110_01111_1111111111111111; 	// sw
disk[30] <= 32'b010000_00000_10000_0000000000011000; 	// li
disk[31] <= 32'b010010_11110_10000_0000000000000000; 	// sw
disk[32] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[33] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[34] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[35] <= 32'b001110_00110_00010_0000000000000000; 	// mov
disk[36] <= 32'b010010_11110_11111_1111111111111110; 	// sw
disk[37] <= 32'b111110_00000000000000000000000001; 	// jal
disk[38] <= 32'b000010_11110_11110_0000000000000100; 	// subi
disk[39] <= 32'b001111_11110_11111_1111111111111110; 	// lw
disk[40] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[41] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[42] <= 32'b010100_00000_00001_1001010111110000; 	// out
disk[43] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[44] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

