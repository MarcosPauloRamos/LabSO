********** Código intermediário **********

1: (function, fibo, _, _)
2: (get_param, n, _, _)
3: (equal, n, 0, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 0, _, _)
6: (goto, L4, _, _)
7: (label, L1, _, _)
8: (equal, n, 1, t2)
9: (jump_if_false, t2, L2, _)
10: (return, 1, _, _)
11: (goto, L3, _, _)
12: (label, L2, _, _)
13: (param_list, 1, _, _)
14: (subtraction, n, 1, t3)
15: (set_param, t3, _, _)
16: (call, fibo, 1, t4)
17: (param_list, 1, _, _)
18: (subtraction, n, 2, t5)
19: (set_param, t5, _, _)
20: (call, fibo, 1, t6)
21: (addition, t4, t6, t7)
22: (return, t7, _, _)
23: (label, L3, _, _)
24: (label, L4, _, _)
25: (syscall, _, _, _)

********** Código objeto **********

fibo:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t1, 0
    4:	eq	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 0
    7:	mov	$v0, $t2
    8:	jr	$ra
    9:	j	L4
.L1	
    10:	lw	$s0, 0($sp)
    11:	li	$t4, 1
    12:	eq	$t3, $s0, $t4
    13:	jf	$t3, L2
    14:	li	$t5, 1
    15:	mov	$v0, $t5
    16:	jr	$ra
    17:	j	L3
.L2	
    18:	lw	$s0, 0($sp)
    19:	subi	$t6, $s0, 1
    20:	mov	$a0, $t6
    21:	sw	$ra, -1($sp)
    22:	jal	fibo
    23:	subi	$sp, $sp, 3
    24:	lw	$ra, -1($sp)
    25:	mov	$s0, $v0
    26:	lw	$s1, 0($sp)
    27:	subi	$t7, $s1, 2
    28:	mov	$a0, $t7
    29:	sw	$ra, -1($sp)
    30:	jal	fibo
    31:	subi	$sp, $sp, 3
    32:	lw	$ra, -1($sp)
    33:	mov	$s0, $v0
    34:	lw	$t8, $t8
    35:	add	$t0, $t8, $s0
    36:	mov	$v0, $t0
    37:	jr	$ra
.L3	
.L4	
    38:	subi	$sp, $sp, 2
    39:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_11111111111111111111111111;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[2] <= 32'b010010_11110_00001_0000000000000000; 	// sw
disk[3] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[4] <= 32'b010000_00000_10000_0000000000000000; 	// li
disk[5] <= 32'b000000_00101_10000_01111_00000_001100; 	// eq
disk[6] <= 32'b010101_01111_00000_0000000000001011; 	// jf
disk[7] <= 32'b010000_00000_10001_0000000000000000; 	// li
disk[8] <= 32'b001110_10001_11000_0000000000000000; 	// mov
disk[9] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[10] <= 32'b111100_00000000000000000000100111; 	// j
disk[11] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[12] <= 32'b010000_00000_10011_0000000000000001; 	// li
disk[13] <= 32'b000000_00101_10011_10010_00000_001100; 	// eq
disk[14] <= 32'b010101_10010_00000_0000000000010011; 	// jf
disk[15] <= 32'b010000_00000_10100_0000000000000001; 	// li
disk[16] <= 32'b001110_10100_11000_0000000000000000; 	// mov
disk[17] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[18] <= 32'b111100_00000000000000000000100111; 	// j
disk[19] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[20] <= 32'b000010_00101_10101_0000000000000001; 	// subi
disk[21] <= 32'b001110_10101_00001_0000000000000000; 	// mov
disk[22] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[23] <= 32'b111110_00000000000000000000000001; 	// jal
disk[24] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[25] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[26] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[27] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[28] <= 32'b000010_00110_10110_0000000000000010; 	// subi
disk[29] <= 32'b001110_10110_00001_0000000000000000; 	// mov
disk[30] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[31] <= 32'b111110_00000000000000000000000001; 	// jal
disk[32] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[33] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[34] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[35] <= 32'b001111_10111_10111_0000000000000000; 	// lw
disk[36] <= 32'b000000_10111_00101_01111_00000_000000; 	// add
disk[37] <= 32'b001110_01111_11000_0000000000000000; 	// mov
disk[38] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[39] <= 32'b000010_11110_11110_0000000000000010; 	// subi
disk[40] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

