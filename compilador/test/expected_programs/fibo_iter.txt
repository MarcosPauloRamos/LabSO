********** Código intermediário **********

1: (function, fibonacci, _, _)
2: (get_param, n, _, _)
3: (assign, c, 1, _)
4: (assign, fn, 1, _)
5: (assign, fmenos, 0, _)
6: (label, L1, _, _)
7: (less_than, c, n, t1)
8: (jump_if_false, t1, L2, _)
9: (assign, aux, fmenos, _)
10: (assign, fmenos, fn, _)
11: (addition, fn, aux, t2)
12: (assign, fn, t2, _)
13: (addition, c, 1, t3)
14: (assign, c, t3, _)
15: (goto, L1, _, _)
16: (label, L2, _, _)
17: (return, fn, _, _)
18: (function, main, _, _)
19: (param_list, 1, _, _)
20: (param_list, 1, _, _)
21: (set_param, 5, _, _)
22: (call, fibonacci, 1, t4)
23: (set_param, t4, _, _)
24: (call, output, 1, t5)
25: (syscall, _, _, _)

********** Código objeto **********

fibonacci:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	li	$t0, 1
    3:	sw	$t0, -3($sp)
    4:	li	$t1, 1
    5:	sw	$t1, -2($sp)
    6:	li	$t2, 0
    7:	sw	$t2, -1($sp)
.L1	
    8:	lw	$s0, -3($sp)
    9:	lw	$s1, -4($sp)
    10:	lt	$t3, $s0, $s1
    11:	jf	$t3, L2
    12:	lw	$s2, -1($sp)
    13:	sw	$s2, 0($sp)
    14:	lw	$s3, -2($sp)
    15:	sw	$s3, -1($sp)
    16:	lw	$s2, -1($sp)
    17:	lw	$s4, 0($sp)
    18:	add	$t4, $s3, $s4
    19:	sw	$t4, -2($sp)
    20:	lw	$s3, -2($sp)
    21:	addi	$t5, $s0, 1
    22:	sw	$t5, -3($sp)
    23:	lw	$s0, -3($sp)
    24:	j	L1
.L2	
    25:	lw	$s0, -2($sp)
    26:	mov	$v0, $s0
    27:	jr	$ra

main:
    28:	addi	$sp, $sp, 1
    29:	li	$a0, 5
    30:	sw	$ra, 0($sp)
    31:	jal	fibonacci
    32:	subi	$sp, $sp, 7
    33:	lw	$ra, 0($sp)
    34:	mov	$s0, $v0
    35:	mov	$a0, $s0
    36:	out	$a0, 10242672
    37:	subi	$sp, $sp, 1
    38:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000011101;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111100; 	// sw
disk[3] <= 32'b010000_00000_01111_0000000000000001; 	// li
disk[4] <= 32'b010010_11110_01111_1111111111111101; 	// sw
disk[5] <= 32'b010000_00000_10000_0000000000000001; 	// li
disk[6] <= 32'b010010_11110_10000_1111111111111110; 	// sw
disk[7] <= 32'b010000_00000_10001_0000000000000000; 	// li
disk[8] <= 32'b010010_11110_10001_1111111111111111; 	// sw
disk[9] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[10] <= 32'b001111_11110_00110_1111111111111100; 	// lw
disk[11] <= 32'b000000_00101_00110_10010_00000_001110; 	// lt
disk[12] <= 32'b010101_10010_00000_0000000000011010; 	// jf
disk[13] <= 32'b001111_11110_00111_1111111111111111; 	// lw
disk[14] <= 32'b010010_11110_00111_0000000000000000; 	// sw
disk[15] <= 32'b001111_11110_01000_1111111111111110; 	// lw
disk[16] <= 32'b010010_11110_01000_1111111111111111; 	// sw
disk[17] <= 32'b001111_11110_00111_1111111111111111; 	// lw
disk[18] <= 32'b001111_11110_01001_0000000000000000; 	// lw
disk[19] <= 32'b000000_01000_01001_10011_00000_000000; 	// add
disk[20] <= 32'b010010_11110_10011_1111111111111110; 	// sw
disk[21] <= 32'b001111_11110_01000_1111111111111110; 	// lw
disk[22] <= 32'b000001_00101_10100_0000000000000001; 	// addi
disk[23] <= 32'b010010_11110_10100_1111111111111101; 	// sw
disk[24] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[25] <= 32'b111100_00000000000000000000001001; 	// j
disk[26] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[27] <= 32'b001110_00101_11000_0000000000000000; 	// mov
disk[28] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[29] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[30] <= 32'b010000_00000_00001_0000000000000101; 	// li
disk[31] <= 32'b010010_11110_11111_0000000000000000; 	// sw
disk[32] <= 32'b111110_00000000000000000000000001; 	// jal
disk[33] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[34] <= 32'b001111_11110_11111_0000000000000000; 	// lw
disk[35] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[36] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[37] <= 32'b010100_00000_00001_0100101001110000; 	// out
disk[38] <= 32'b000010_11110_11110_0000000000000001; 	// subi
disk[39] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

