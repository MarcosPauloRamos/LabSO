********** Código intermediário **********

1: (function, mult, _, _)
2: (get_param, n, _, _)
3: (get_param, m, _, _)
4: (less_than, m, 1, t1)
5: (jump_if_false, t1, L1, _)
6: (return, 1, _, _)
7: (goto, L2, _, _)
8: (label, L1, _, _)
9: (param_list, 2, _, _)
10: (set_param, n, _, _)
11: (subtraction, m, 1, t2)
12: (set_param, t2, _, _)
13: (call, mult, 2, t3)
14: (multiplication, t3, n, t4)
15: (return, t4, _, _)
16: (label, L2, _, _)
17: (return, _, _, _)
18: (function, main, _, _)
19: (param_list, 1, _, _)
20: (param_list, 2, _, _)
21: (set_param, 5, _, _)
22: (set_param, 6, _, _)
23: (call, mult, 2, t5)
24: (set_param, t5, _, _)
25: (call, output, 1, t6)
26: (syscall, _, _, _)

********** Código objeto **********

mult:
    0:	addi	$sp, $sp, 4
    1:	sw	$a0, -1($sp)
    2:	sw	$a1, 0($sp)
    3:	lw	$s0, 0($sp)
    4:	li	$t1, 1
    5:	lt	$t0, $s0, $t1
    6:	jf	$t0, L1
    7:	li	$t2, 1
    8:	mov	$v0, $t2
    9:	jr	$ra
    10:	j	L2
.L1	
    11:	lw	$s0, -1($sp)
    12:	mov	$a0, $s0
    13:	lw	$s1, 0($sp)
    14:	subi	$t3, $s1, 1
    15:	mov	$a1, $t3
    16:	sw	$ra, -2($sp)
    17:	jal	mult
    18:	subi	$sp, $sp, 4
    19:	lw	$ra, -2($sp)
    20:	mov	$s0, $v0
    21:	lw	$s1, -1($sp)
    22:	mul	$t4, $s0, $s1
    23:	mov	$v0, $t4
    24:	jr	$ra
.L2	
    25:	jr	$ra

main:
    26:	addi	$sp, $sp, 1
    27:	li	$a0, 5
    28:	li	$a1, 6
    29:	sw	$ra, 0($sp)
    30:	jal	mult
    31:	subi	$sp, $sp, 4
    32:	lw	$ra, 0($sp)
    33:	mov	$s0, $v0
    34:	mov	$a0, $s0
    35:	out	$a0, 24813712
    36:	subi	$sp, $sp, 1
    37:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000011011;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000100; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111111; 	// sw
disk[3] <= 32'b010010_11110_00010_0000000000000000; 	// sw
disk[4] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[5] <= 32'b010000_00000_10000_0000000000000001; 	// li
disk[6] <= 32'b000000_00101_10000_01111_00000_001110; 	// lt
disk[7] <= 32'b010101_01111_00000_0000000000001100; 	// jf
disk[8] <= 32'b010000_00000_10001_0000000000000001; 	// li
disk[9] <= 32'b001110_10001_11000_0000000000000000; 	// mov
disk[10] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[11] <= 32'b111100_00000000000000000000011010; 	// j
disk[12] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[13] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[14] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[15] <= 32'b000010_00110_10010_0000000000000001; 	// subi
disk[16] <= 32'b001110_10010_00010_0000000000000000; 	// mov
disk[17] <= 32'b010010_11110_11111_1111111111111110; 	// sw
disk[18] <= 32'b111110_00000000000000000000000001; 	// jal
disk[19] <= 32'b000010_11110_11110_0000000000000100; 	// subi
disk[20] <= 32'b001111_11110_11111_1111111111111110; 	// lw
disk[21] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[22] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[23] <= 32'b000000_00101_00110_10011_00000_000010; 	// mul
disk[24] <= 32'b001110_10011_11000_0000000000000000; 	// mov
disk[25] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[26] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[27] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[28] <= 32'b010000_00000_00001_0000000000000101; 	// li
disk[29] <= 32'b010000_00000_00010_0000000000000110; 	// li
disk[30] <= 32'b010010_11110_11111_0000000000000000; 	// sw
disk[31] <= 32'b111110_00000000000000000000000001; 	// jal
disk[32] <= 32'b000010_11110_11110_0000000000000100; 	// subi
disk[33] <= 32'b001111_11110_11111_0000000000000000; 	// lw
disk[34] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[35] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[36] <= 32'b010100_00000_00001_1010000010010000; 	// out
disk[37] <= 32'b000010_11110_11110_0000000000000001; 	// subi
disk[38] <= 32'b111001_11001_00000_0000000000000000; 	// syscall

